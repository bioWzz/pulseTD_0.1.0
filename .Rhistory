devtools::build_manual()
devtools::check_failures()
devtools::check_failures('C:/Users/Administrator/AppData/Local/Temp/RtmpYJg8k2/pulseTD.Rcheck/00check.log')
?devtools::check()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::check(manual = TRUE)
devtools::build_vignettes()
tools::buildVignettes()
tools::checkVignettes()
tools::checkVignettes('pulseTD')
tools::compactPDF()
getwd()
tools::compactPDF("E:/pluseTD/pulseTD")
tools::buildVignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes('tutorial.Rmd')
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::check_man()
devtools::check(manual = TRUE)
?estimateExpression
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::check(manual = TREU)
devtools::check(manual = TRUE)
?estimateParams
Sys.getenv("R_QPDF", "qpdf")
Sys.getenv("PATH")
Sys.which(Sys.getenv("R_QPDF", "qpdf"))
str(pulseRates)
pulseRates
table(pulseRates)
?correctionParams
?getRates
?getParams
?getRates
?plotRates
?predictExpression
sessionInfo()
data('pulseRates', package='pulseTD')
pulseRates_correct = correctionParams(pulseRates)
pulseRates_correct@fitfailure
data('pulseRates', package='pulseTD')
TimeGrid <- c(0, 15, 30, 45, 60, 75, 90, 105, 120, 135, 150, 165, 180)
pulseRates_correct <- correctionParams(pulseRates)
transcription_params = getParams(pulseRates,'transcription')
degradation_params = getParams(pulseRates, 'degradation')
processing_params = getParams(pulseRates, 'processing')
head(transcription_params)
head(degradation_params)
head(processing_params)
transcription_params = getParams(pulseRates, 'transcription', genename=c(1,2,3))
head(transcription_params)
# get pulse Model value
transcription_pulse = pulseModel(as.matrix(transcription_params[1,]), TimeGrid)
degradation_pulse = pulseModel(as.matrix(degradation_params[1,]), TimeGrid)
processing_pulse = pulseModel(as.matrix(processing_params[1,]), TimeGrid)
data('pulseRates', package='pulseTD')
pulseRates_correct <- correctionParams(pulseRates)
transcription = getRates(pulseRates_correct,'transcription')
degradation = getRates(pulseRates_correct, 'degradation')
processing = getRates(pulseRates_correct, 'processing')
head(transcription)
head(degradation)
head(processing)
data('pulseRates', package='pulseTD')
pulseRates_correct <- correctionParams(pulseRates)
transcription = getRates(pulseRates_correct,'transcription')
head(transcription)
degradation = getRates(pulseRates_correct, 'degradation')
head(degradation)
processing = getRates(pulseRates_correct, 'processing')
head(processing)
data('pulseRates', package='pulseTD')
pulseRates_correct <- correctionParams(pulseRates)
transcription = getRates(pulseRates_correct,'transcription')
degradation = getRates(pulseRates_correct, 'degradation')
processing = getRates(pulseRates_correct, 'processing')
head(transcription)
if(length(pulseRates_correct@fitfailure)==0){
genename=pulseRates_correct@genenames
}else{
genename=pulseRates_correct@genenames[-pulseRates_correct@fitfailure]
}
transcription_factor <- getRates(pulseRates_correct,'transcription', genename =c(1,2,3))
degradation_factor <- getRates(pulseRates_correct, 'degradation', genename=c(1,2,3)) /(sim_TT_sample[c(1,2,3),]-sim_PT_sample[c(1,2,3),])
?getRates
if(length(pulseRates_correct@fitfailure)==0){
genename=pulseRates_correct@genenames
}else{
genename=pulseRates_correct@genenames[-pulseRates_correct@fitfailure]
}
load(file.path(system.file(package="pulseTD"),'data','rpkmSim.RData'))
if(length(pulseRates_correct@fitfailure)==0){
genename=pulseRates_correct@genenames
}else{
genename=pulseRates_correct@genenames[-pulseRates_correct@fitfailure]
}
load(file.path(system.file(package="pulseTD"),'inst/extdata','rpkmSim.RData'))
if(length(pulseRates_correct@fitfailure)==0){
genename=pulseRates_correct@genenames
}else{
genename=pulseRates_correct@genenames[-pulseRates_correct@fitfailure]
}
data('pulseRates', package='rpkmSim.RData')
if(length(pulseRates_correct@fitfailure)==0){
genename=pulseRates_correct@genenames
}else{
genename=pulseRates_correct@genenames[-pulseRates_correct@fitfailure]
}
data('rpkmSim.RData', package='pulseTD')
sim_TL_sample <- rpkmSim$labexon
sim_PT_sample <- rpkmSim$totintr
sim_TT_sample <- rpkmSim$totexon
transcription_factor <- getRates(pulseRates_correct,'transcription', genename =c(1,2,3))
degradation_factor <- getRates(pulseRates_correct, 'degradation', genename=c(1,2,3)) /(sim_TT_sample[c(1,2,3),]-sim_PT_sample[c(1,2,3),])
processing_factor <- getRates(pulseRates_correct,'processing',genename=c(1,2,3))/ (sim_PT_sample[c(1,2,3),])
head(transcription_factor)
head(degradation_factor)
head(processing_factor)
if(length(pulseRates_correct@fitfailure)==0){
genename=pulseRates_correct@genenames
}else{
genename=pulseRates_correct@genenames[-pulseRates_correct@fitfailure]
}
data('rpkmSim.RData', package='pulseTD')
sim_TL_sample <- rpkmSim$labexon
sim_PT_sample <- rpkmSim$totintr
sim_TT_sample <- rpkmSim$totexon
transcription_factor <- getRates(pulseRates_correct,'transcription', genename =c(1,2,3))
degradation_factor <- getRates(pulseRates_correct, 'degradation', genename=c(1,2,3)) /(sim_TT_sample[c(1,2,3),]-sim_PT_sample[c(1,2,3),])
processing_factor <- getRates(pulseRates_correct,'processing',genename=c(1,2,3))/ (sim_PT_sample[c(1,2,3),])
head(degradation_factor)
data('rpkmSim.RData', package='pulseTD')
if(length(pulseRates_correct@fitfailure)==0){
genename=pulseRates_correct@genenames
}else{
genename=pulseRates_correct@genenames[-pulseRates_correct@fitfailure]
}
data('rpkmSim', package='pulseTD')
sim_TL_sample <- rpkmSim$labexon
sim_PT_sample <- rpkmSim$totintr
sim_TT_sample <- rpkmSim$totexon
transcription_factor <- getRates(pulseRates_correct,'transcription', genename =c(1,2,3))
degradation_factor <- getRates(pulseRates_correct, 'degradation', genename=c(1,2,3)) /(sim_TT_sample[c(1,2,3),]-sim_PT_sample[c(1,2,3),])
processing_factor <- getRates(pulseRates_correct,'processing',genename=c(1,2,3))/ (sim_PT_sample[c(1,2,3),])
head(degradation_factor)
transcription_pre <- getRates(pulseRates_correct, 'transcription', timevector=seq(0,360, 15))
degradation_pre <- getRates(pulseRates_correct, 'degradation', timevector=seq(0,360, 15))
processing_pre <- getRates(pulseRates_correct, 'processing', timevector <- seq(0,360, 15))
head(transcription_pre)
head(degradation_pre)
head(processing_pre)
transcription_pre <- getRates(pulseRates_correct, 'transcription', timevector=seq(0,360, 15))
degradation_pre <- getRates(pulseRates_correct, 'degradation', timevector=seq(0,360, 15))
processing_pre <- getRates(pulseRates_correct, 'processing', timevector <- seq(0,360, 15))
head(degradation_pre)
data('pulseRates', package='pulseTD')
plotRates(pulseRates, 'NM_001001181')
plotRates(pulseRates, 'NM_001001181', predict=c(0,180,20))
data('pulseRates', package='pulseTD')
plotRates(pulseRates, 15)
plotRates(pulseRates, 15, predict=c(0,180,20))
data('pulseRates', package='pulseTD')
pulseRates_correct = correctionParams(pulseRates)
TimeGrid = seq(0,180,15)
preExp = predictExpression(pulseRates_correct, tg=TimeGrid)
df = data.frame(preExp[['NM_001002011']])
head(df)
tools::compactPDF()
devtools::check(manual = TRUE)
devtools::check(manual = TRUE)
Sys.which(Sys.getenv("R_QPDF", "qpdf"))
Sys.which(Sys.getenv("R_QPDF", "qpdf"))
devtools::check(manual = TRUE)
Sys.setenv(R_GSCMD='D:\\ghostscript\\gs9.27\\bin\\gswin64.exe')
devtools::check(manual = TRUE)
devtools::check(manual = TRUE)
devtools::release()
devtools::check(manual = TRUE)
Sys.getenv('pdf')
Sys.getenv()
devtools::check(manual = TRUE)
Sys.setenv(R_GSCMD="D:\\ghostscript\\gs9.27\\bin\\gswin64.exe")
library(pulseTD)
Sys.setenv(R_GSCMD="D:\\ghostscript\\gs9.27\\bin\\gswin64.exe")
devtools::check(manual = TRUE)
?getRates
?plotRates
if(length(pulseRates_correct@fitfailure)==0){
genename=pulseRates_correct@genenames
}else{
genename=pulseRates_correct@genenames[-pulseRates_correct@fitfailure]
}
data('rpkmSim', package='pulseTD')
simTL <- rpkmSim$labexon[c(1,2,3),]
simPT <- rpkmSim$totintr[c(1,2,3),]
simTT <- rpkmSim$totexon[c(1,2,3),]
trans_factor <- getRates(pulseRates_correct,'transcription', genename=c(1,2,3))
degr_factor <- getRates(pulseRates_correct, 'degradation', genename=c(1,2,3)) /(simTT-simPT)
proc_factor <- getRates(pulseRates_correct,'processing',genename=c(1,2,3))/simPT
head(degradation_factor)
if(length(pulseRates_correct@fitfailure)==0){
genename=pulseRates_correct@genenames
}else{
genename=pulseRates_correct@genenames[-pulseRates_correct@fitfailure]
}
data('rpkmSim', package='pulseTD')
simTL <- rpkmSim$labexon[c(1,2,3),]
simPT <- rpkmSim$totintr[c(1,2,3),]
simTT <- rpkmSim$totexon[c(1,2,3),]
trans_factor <- getRates(pulseRates_correct,'transcription', genename=c(1,2,3))
degr_factor <- getRates(pulseRates_correct, 'degradation', genename=c(1,2,3)) /(simTT-simPT)
proc_factor <- getRates(pulseRates_correct,'processing',genename=c(1,2,3))/simPT
head(degr_factor)
Sys.setenv(R_GSCMD="D:\\ghostscript\\gs9.27\\bin\\gswin64.exe")
devtools::check(manual = TRUE)
devtools::check(manual = TRUE)
devtools::check(manual = TRUE)
library(pulseTD)
library(pulseTD)
library(pulseTD)
devtools::check(manual = TRUE)
devtools::check(manual = TRUE)
devtools::check(manual = TRUE)
library(pulseTD)
data('pulseRates', package='pulseTD')
plotRates(pulseRates, 15)
library(pulseTD)
data('pulseRates', package='pulseTD')
plotRates(pulseRates, 15)
data('pulseRates', package='pulseTD')
plotRates(pulseRates, 15)
library(pulseTD)
library(pulseTD)
library(pulseTD)
library(pulseTD)
library(pulseTD)
library(pulseTD)
library(pulseTD)
?estimateExpression
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("GO.db")
soucre('http://www.bioconductor.org')
source('http://www.bioconductor.org')
source('https://www.bioconductor.org')
source("https://www.bioconductor.org")
source("https://www.bioconductor.org/biocLite.R")
biocLite('Go.db')
biocLite('GO.db')
biocLite('GO.db')
GO.db::GO()
library(GO.db)
library(pulseTD)
?AnnotatedDataFrame
?getParams
colorRampPalette(c("#2F4F4F","#6B8E23","#B4EEB4","#CDC9C9","#CD6839","#B22222"))(50)
?estimateExpression
devtools::document()
devtools::load_all(".")
?exonsBy
devtools::load_all(".")
?
exonsBy
?intronsByTranscript
?unlist
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
txdb <- TxDb.Hsapiens.UCSC.hg19.knownGene
test_path <- file.path(system.file(package="pulseTD"),'extdata/test1.sorted.bam')
test_path2 <- file.path(system.file(package="pulseTD"),'extdata/test2.sorted.bam')
\dontrun{res <- estimateExpression(txdb,c(test_path,test_path2), by='gene')}
res <- estimateExpression(txdb,c(test_path,test_path2), by='gene')
devtools::use_data(res)
devtools::load_all(".")
head(res$total_exp)
data(res, 'pulseTD')
data(res, package='pulseTD')
head(res$total_exp)
head(res$pre_exp)
Sys.setenv(R_GSCMD="D:\\ghostscript\\gs9.27\\bin\\gswin64.exe")
library(pulseTD)
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
txdb <- TxDb.Hsapiens.UCSC.hg19.knownGene
test_path <- file.path(system.file(package="pulseTD"),'extdata/test1.sorted.bam')
test_path2 <- file.path(system.file(package="pulseTD"),'extdata/test2.sorted.bam')
res <- estimateExpression(txdb,c(test_path,test_path2), by='gene')
head(res$total_exp)
head(res$pre_exp)
devtools::load_all(".")
library(pulseTD)
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
txdb <- TxDb.Hsapiens.UCSC.hg19.knownGene
test_path <- file.path(system.file(package="pulseTD"),'extdata/test1.sorted.bam')
test_path2 <- file.path(system.file(package="pulseTD"),'extdata/test2.sorted.bam')
res <- estimateExpression(txdb,c(test_path,test_path2), by='gene')
head(res$total_exp)
head(res$pre_exp)
?estimateExpression
devtools::build_vignettes()
system("defaults write org.R-project.R force.LANG en_US.UTF-8")
sessionInfo()
library(pulseTD)
TxDb.Hsapiens.UCSC.hg19.knownGene
library(pulseTD)
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
library(pulseTD)
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
library(pulseTD)
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
library(pulseTD)
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
library(pulseTD)
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
library(pulseTD)
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
library(pulseTD)
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
library(pulseTD)
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
library(pulseTD)
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
library(pulseTD)
library(pulseTD)
library(pulseTD)
library(pulseTD)
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
library(pulseTD)
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
library(pulseTD)
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
Sys.setenv(R_GSCMD="D:\\ghostscript\\gs9.27\\bin\\gswin64.exe")
rpkmres <- estimateExpression(txdb,c(test_path,test_path2), by='gene')
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
txdb <- TxDb.Hsapiens.UCSC.hg19.knownGene
test_path <- file.path(system.file(package="pulseTD"),'extdata/test1.sorted.bam')
test_path2 <- file.path(system.file(package="pulseTD"),'extdata/test2.sorted.bam')
rpkmres <- estimateExpression(txdb,c(test_path,test_path2), by='gene')
devtools::use_data(rpkmres)
usethis::use_data()(rpkmres)
data(rpkmres, package='pulseTD')
data('rpkmSim', package='pulseTD')
rpkm_TL <- rpkmSim$labexon[1:2,]
rpkm_PT <- rpkmSim$totintr[1:2,]
rpkm_TT <- rpkmSim$totexon[1:2,]
TimeGrid <- c(0, 15, 30, 45, 60, 75, 90, 105, 120, 135, 150, 165, 180)
tL <- 10
pulseRates<- estimateParams(rpkm_TL, rpkm_TT, rpkm_PT,TimeGrid, tL, clusterNumber=1,loopnumber=10)
usethis::use_data()(pulseRates)
devtools::build_manual()
data('pulseRates', package='pulseTD')
pulseRates_correct = correctionParams(pulseRates)
TimeGrid = seq(0,180,15)
preExp = predictExpression(pulseRates_correct, tg=TimeGrid)
usethis::use_data()(preExp)
usethis::use_data(preExp)
?estimateExpression
preExp
str(preExp)
clast(rmkmres)
class(rmkmres)
class(rpkmres)
devtools::load_all(".")
class(rpkmres)
data("rpkmres", packages='pulseTD')
head(rpkmres)
str(rpkmres)
devtools::build_manual()
?plotSingleGene
Sys.setenv(R_GSCMD="D:\\ghostscript\\gs9.27\\bin\\gswin64.exe")
rpkmres <- estimateExpression(txdb,c(test_path,test_path2), by='gene')
library(pulseTD)
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
library(pulseTD)
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
rpkmres <- estimateExpression(txdb,c(test_path,test_path2), by='gene')
rpkmres <- estimateExpression(txdb,c(test_path,test_path2), by='gene')
txdb <- TxDb.Hsapiens.UCSC.hg19.knownGene
test_path <- file.path(system.file(package="pulseTD"),'extdata/test1.sorted.bam')
test_path2 <- file.path(system.file(package="pulseTD"),'extdata/test2.sorted.bam')
rpkmres <- estimateExpression(txdb,c(test_path,test_path2), by='gene')
rpkmres <- estimateExpression(txdb,c(test_path,test_path2), by='gene')
rpkmres <- estimateExpression(txdb,c(test_path,test_path2), by='gene')
rpkmres <- estimateExpression(txdb,c(test_path,test_path2), by='gene')
data('rpkmres', package='pulseTD')
head(rpkmres$total_exp)
head(rpkmres$pre_exp)
rpkmres <- estimateExpression(txdb,c(test_path,test_path2), by='gene')
data('preExp', package='pulseTD')
df = data.frame(preExp[['NM_001002011']])
head(df)
library(pulseTD)
?estimateExpression
?Classes
?pulseTDmodel
?INSPEcT::INSPEcT
?INSPEcT::`INSPEcT-class`
?INSPEcT::makeRPKMs
?estimateExpression
library(pulseTD)
?pulseModel
devtools::build_manual()
?knitr
?knitr::`knitr-package`
?RCurl
install.packages('DRAT')
install.packages('drat')
getwd()
tools::write_PACKAGES("E:/pluseTD)
)
""
"
tools::write_PACKAGES("E:/pluseTD")
tools::write_PACKAGES("E:/pluseTD/src/contrib/")
tools::write_PACKAGES("E:/pluseTD/bin/windows/contrib/3.2")
tools::write_PACKAGES("E:/pluseTD/bin/macosx/contrib/3.2")
drat::initRepo(name = "pulseTD", basepath = "~/GitHub/")
drat::initRepo(name = "pulseTD", basepath = "E:/pluseTD")
drat::initRepo(name = "pulseTD", basepath = "E:/GitHub")
install.packages(c("drat","git2r"))
install.packages(c("drat", "git2r"))
drat::initRepo(name = "pulseTD", basepath = "E:/GitHub")
drat::initRepo(name = "pulseTD", basepath = "E:/pluseTD/GitHub")
options(pulseTD = "E:/pluseTD/GitHub/pulseTD")
drat::insertPackage("E:/pluseTD/pulseTD_0.1.0.tar.gz",  # Path to src
repodir = "E:/pluseTD/GitHub/pulseTD",                   # Location of git repo: not need if dratRepo set
action="prune",                                  # Remove old package version
commit = T)
repo = git2r::repository("E:/pluseTD/GitHub/pulseTD")
cred = git2r::cred_user_pass("username", "password")
git2r::push(repo, "origin", "refs/heads/gh-pages", credentials = cred)
cred = git2r::cred_user_pass("woshixinxin", "woshixinxin123456")
git2r::push(repo, "origin", "refs/heads/gh-pages", credentials = cred)
pruneRepo()
drat::pruneRepo()
drat::initRepo(name = "pulseTD", basepath = "E:/pluseTD/GitHub")
drat::initRepo(name = "pulseTD", basepath = "E:/pluseTD/GitHub")
drat::initRepo(name = "pulsetd", basepath = "E:/pluseTD/GitHub")
options(pulseTD = "E:/pluseTD/GitHub/pulsetd")
# Add a package to it
drat::insertPackage("E:/pluseTD/pulseTD_0.1.0.tar.gz",      # Path to src
repodir = "E:/pluseTD/GitHub/pulsetd",  # Location of git repo: not need if dratRepo set
action="prune",                         # Remove old package version
commit = T)                             # Commit to repo
drat::pruneRepo()
# Open repository
repo = git2r::repository("E:/pluseTD/GitHub/pulsetd")
repo
cred = git2r::cred_user_pass("woshixinxin", "woshixinxin123456")
cred
?git2r::push
?git2r::push()
# Push changes in local repository to GitHub
git2r::push(repo, "origin", "refs/heads/gh-pages", credentials = cred)
# Push changes in local repository to GitHub
git2r::push(repo, "origin", "refs/heads/gh-pages", credentials = cred)
# Push changes in local repository to GitHub
git2r::push(repo, "origin", "refs/heads/gh-pages", credentials = cred)
cred = git2r::cred_user_pass("woshixinxin", "woshixinxin123456")
# Push changes in local repository to GitHub
git2r::push(repo, "origin", "refs/heads/gh-pages", credentials = cred)
# Push changes in local repository to GitHub
git2r::push(repo, "origin", "refs/heads/gh-pages", credentials = cred)
# Push changes in local repository to GitHub
git2r::push(repo, "origin", "refs/heads/gh-pages", credentials = cred)
drat::addRepo("pulsetd","http://woshixinxin.github.io/pulsetd")
# Push changes in local repository to GitHub
git2r::push(repo, "origin", "refs/heads/gh-pages", credentials = cred)
# Push changes in local repository to GitHub
git2r::push(repo, "origin", "refs/heads/gh-pages", credentials = cred)
# Push changes in local repository to GitHub
git2r::push(repo, "origin", "refs/heads/gh-pages", credentials = cred)
# Push changes in local repository to GitHub
git2r::push(repo, "origin", "refs/heads/gh-pages", credentials = cred)
drat::addRepo("pulsetd","https://github.com/woshixinxin/origin")
drat::addRepo("pulsetd","http://woshixinxin.github.io/pulsetd")
drat::addRepo("origin","http://woshixinxin.github.io/pulsetd")
sessionInfo()
devtools::release
devtools::release_checks()
devtools::release()
devtools::revdep_check()
revdepcheck::revdep_check()
library(BiocCheck)
source('https://bioconductor.org/biocLite.R')
biocLite('BiocCheck')
pathToPkg <- file.path("..","pulseTD")
pathToPkg
getwd
getwd()
pathToPkg <- file.path("E:/pluseTD/","pulseTD")
pathToPkg
pathToPkg <- file.path("E:/pluseTD","pulseTD")
BiocCheck(pathToPkg)
BioCheck::BiocCheck(pathToPkg)
BiocCheck::BiocCheck(pathToPkg)
library(BiocCheck)
installed.packages('graph')
library(graph)
biocLite('graoh')
biocLite('graph')
library(BiocCheck)
BiocCheck::BiocCheck(pathToPkg)
?setRepositories
